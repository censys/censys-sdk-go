// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/censys/censys-sdk-go-internal/models/components"
)

type V3CollectionsCrudListGlobals struct {
	OrganizationID *string `queryParam:"style=form,explode=true,name=organization_id"`
}

func (o *V3CollectionsCrudListGlobals) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

type V3CollectionsCrudListRequest struct {
	// The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#/set-your-organization-id) for more information.
	OrganizationID *string `queryParam:"style=form,explode=false,name=organization_id"`
	// page token for the requested page of collection results
	PageToken *string `queryParam:"style=form,explode=false,name=page_token"`
	// amount of results to return per page
	PageSize *int64 `queryParam:"style=form,explode=false,name=page_size"`
}

func (o *V3CollectionsCrudListRequest) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *V3CollectionsCrudListRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *V3CollectionsCrudListRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type V3CollectionsCrudListResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	ResponseEnvelopeListCollectionsResponseV1 *components.ResponseEnvelopeListCollectionsResponseV1
	Headers                                   map[string][]string
}

func (o *V3CollectionsCrudListResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *V3CollectionsCrudListResponse) GetResponseEnvelopeListCollectionsResponseV1() *components.ResponseEnvelopeListCollectionsResponseV1 {
	if o == nil {
		return nil
	}
	return o.ResponseEnvelopeListCollectionsResponseV1
}

func (o *V3CollectionsCrudListResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
