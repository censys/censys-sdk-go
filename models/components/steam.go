// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type Steam struct {
	BroadcastingActive   *bool    `json:"broadcasting_active,omitempty"`
	ConnectPort          *int     `json:"connect_port,omitempty"`
	ContentCachePort     *int     `json:"content_cache_port,omitempty"`
	DownloadLanPeerGroup *int     `json:"download_lan_peer_group,omitempty"`
	EnabledServices      *int     `json:"enabled_services,omitempty"`
	Euniverse            *int     `json:"euniverse,omitempty"`
	GamesRunning         *bool    `json:"games_running,omitempty"`
	Hostname             *string  `json:"hostname,omitempty"`
	IPAddresses          []string `json:"ip_addresses,omitempty"`
	Is64bit              *bool    `json:"is64bit,omitempty"`
	MacAddresses         []string `json:"mac_addresses,omitempty"`
	MinVersion           *int     `json:"min_version,omitempty"`
	Ostype               *int     `json:"ostype,omitempty"`
	PublicIPAddress      *string  `json:"public_ip_address,omitempty"`
	RemoteplayActive     *bool    `json:"remoteplay_active,omitempty"`
	ScreenLocked         *bool    `json:"screen_locked,omitempty"`
	SteamDeck            *bool    `json:"steam_deck,omitempty"`
	SteamVersion         *string  `json:"steam_version,omitempty"`
	SupportedServices    *int     `json:"supported_services,omitempty"`
	Users                []User   `json:"users,omitempty"`
	Version              *int     `json:"version,omitempty"`
	VrActive             *bool    `json:"vr_active,omitempty"`
	VrLinkCaps           *string  `json:"vr_link_caps,omitempty"`
}

func (o *Steam) GetBroadcastingActive() *bool {
	if o == nil {
		return nil
	}
	return o.BroadcastingActive
}

func (o *Steam) GetConnectPort() *int {
	if o == nil {
		return nil
	}
	return o.ConnectPort
}

func (o *Steam) GetContentCachePort() *int {
	if o == nil {
		return nil
	}
	return o.ContentCachePort
}

func (o *Steam) GetDownloadLanPeerGroup() *int {
	if o == nil {
		return nil
	}
	return o.DownloadLanPeerGroup
}

func (o *Steam) GetEnabledServices() *int {
	if o == nil {
		return nil
	}
	return o.EnabledServices
}

func (o *Steam) GetEuniverse() *int {
	if o == nil {
		return nil
	}
	return o.Euniverse
}

func (o *Steam) GetGamesRunning() *bool {
	if o == nil {
		return nil
	}
	return o.GamesRunning
}

func (o *Steam) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *Steam) GetIPAddresses() []string {
	if o == nil {
		return nil
	}
	return o.IPAddresses
}

func (o *Steam) GetIs64bit() *bool {
	if o == nil {
		return nil
	}
	return o.Is64bit
}

func (o *Steam) GetMacAddresses() []string {
	if o == nil {
		return nil
	}
	return o.MacAddresses
}

func (o *Steam) GetMinVersion() *int {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *Steam) GetOstype() *int {
	if o == nil {
		return nil
	}
	return o.Ostype
}

func (o *Steam) GetPublicIPAddress() *string {
	if o == nil {
		return nil
	}
	return o.PublicIPAddress
}

func (o *Steam) GetRemoteplayActive() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteplayActive
}

func (o *Steam) GetScreenLocked() *bool {
	if o == nil {
		return nil
	}
	return o.ScreenLocked
}

func (o *Steam) GetSteamDeck() *bool {
	if o == nil {
		return nil
	}
	return o.SteamDeck
}

func (o *Steam) GetSteamVersion() *string {
	if o == nil {
		return nil
	}
	return o.SteamVersion
}

func (o *Steam) GetSupportedServices() *int {
	if o == nil {
		return nil
	}
	return o.SupportedServices
}

func (o *Steam) GetUsers() []User {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *Steam) GetVersion() *int {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *Steam) GetVrActive() *bool {
	if o == nil {
		return nil
	}
	return o.VrActive
}

func (o *Steam) GetVrLinkCaps() *string {
	if o == nil {
		return nil
	}
	return o.VrLinkCaps
}
