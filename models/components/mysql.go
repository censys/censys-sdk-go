// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type Mysql struct {
	// Optional plugin-specific data, whose meaning depends on the value of auth_plugin_name. Returned in the initial HandshakePacket.
	AuthPluginData *string `json:"auth_plugin_data,omitempty"`
	// The name of the authentication plugin, returned in the initial HandshakePacket.
	AuthPluginName *string `json:"auth_plugin_name,omitempty"`
	// The set of capability flags the server returned in the initial HandshakePacket. Each entry corresponds to a bit being set in the flags; key names correspond to the #defines in the MySQL docs.
	CapabilityFlags map[string]bool `json:"capability_flags,omitempty"`
	// The identifier for the character set the server is using. Returned in the initial HandshakePacket.
	CharacterSet *int `json:"character_set,omitempty"`
	// The server's internal identifier for this client's connection, sent in the initial HandshakePacket.
	ConnectionID *int `json:"connection_id,omitempty"`
	// Only set if there is an error returned by the server, for example if the scanner is not on the allowed hosts list.
	ErrorCode *int64 `json:"error_code,omitempty"`
	// The friendly name for the error code as defined at https://dev.mysql.com/doc/refman/8.0/en/error-messages-server.html, or UNKNOWN
	ErrorID *string `json:"error_id,omitempty"`
	// Optional string describing the error. Only set if there is an error.
	ErrorMessage *string `json:"error_message,omitempty"`
	// 8-bit unsigned integer representing the server's protocol version sent in the initial HandshakePacket from the server.
	ProtocolVersion *int `json:"protocol_version,omitempty"`
	// The specific server version returned in the initial HandshakePacket. Often in the form x.y.z, but not always.
	ServerVersion *string `json:"server_version,omitempty"`
	// The set of status flags the server returned in the initial HandshakePacket. Each entry corresponds to a bit being set in the flags; key names correspond to the #defines in the MySQL docs.
	StatusFlags map[string]bool `json:"status_flags,omitempty"`
}

func (o *Mysql) GetAuthPluginData() *string {
	if o == nil {
		return nil
	}
	return o.AuthPluginData
}

func (o *Mysql) GetAuthPluginName() *string {
	if o == nil {
		return nil
	}
	return o.AuthPluginName
}

func (o *Mysql) GetCapabilityFlags() map[string]bool {
	if o == nil {
		return nil
	}
	return o.CapabilityFlags
}

func (o *Mysql) GetCharacterSet() *int {
	if o == nil {
		return nil
	}
	return o.CharacterSet
}

func (o *Mysql) GetConnectionID() *int {
	if o == nil {
		return nil
	}
	return o.ConnectionID
}

func (o *Mysql) GetErrorCode() *int64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *Mysql) GetErrorID() *string {
	if o == nil {
		return nil
	}
	return o.ErrorID
}

func (o *Mysql) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *Mysql) GetProtocolVersion() *int {
	if o == nil {
		return nil
	}
	return o.ProtocolVersion
}

func (o *Mysql) GetServerVersion() *string {
	if o == nil {
		return nil
	}
	return o.ServerVersion
}

func (o *Mysql) GetStatusFlags() map[string]bool {
	if o == nil {
		return nil
	}
	return o.StatusFlags
}
