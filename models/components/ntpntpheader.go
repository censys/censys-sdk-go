// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type NTPNTPHeader struct {
	// An enumerated value from 0 to 3 signifying whether a leap second will occur at the end of the current month. 0 signifies no leap second, 1 signifies an additive leap second, 2 signifies a subtractive leap second, and 3 signifies the state is unknown.
	LeapIndicator *int `json:"leap_indicator,omitempty"`
	// An enumerated value from 0 to 7 signifying the operational mode of the server.
	Mode *int `json:"mode,omitempty"`
	// The interval within which the server will expect a subsequent synchronization message, in log2 seconds.
	Poll *int `json:"poll,omitempty"`
	// The precision of the system's clock, in log2 seconds.
	Precision *int `json:"precision,omitempty"`
	// The identifier of the reference clock. For servers in stratum 1, one of an IANA-maintained list of sources. For servers in stratum 2, the ID of the stratum 1 server from which the time was retrieved (usually, its IP address), etc.
	ReferenceID *string `json:"reference_id,omitempty"`
	// The number of servers between a client and a non-NTP time source. 1 signifies that the server is authoritative, having direct access to a sensor. 2 signifies that the server got its time from a "stratum 1" server, etc. 16 means the clock is unsynchronized.
	Stratum *int `json:"stratum,omitempty"`
	// The NTP version indicated in the server's response.
	Version *int `json:"version,omitempty"`
}

func (o *NTPNTPHeader) GetLeapIndicator() *int {
	if o == nil {
		return nil
	}
	return o.LeapIndicator
}

func (o *NTPNTPHeader) GetMode() *int {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *NTPNTPHeader) GetPoll() *int {
	if o == nil {
		return nil
	}
	return o.Poll
}

func (o *NTPNTPHeader) GetPrecision() *int {
	if o == nil {
		return nil
	}
	return o.Precision
}

func (o *NTPNTPHeader) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *NTPNTPHeader) GetStratum() *int {
	if o == nil {
		return nil
	}
	return o.Stratum
}

func (o *NTPNTPHeader) GetVersion() *int {
	if o == nil {
		return nil
	}
	return o.Version
}
