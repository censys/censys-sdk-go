// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type KeyUsage struct {
	// Whether the keyCertSign bit is set.
	CertificateSign *bool `json:"certificate_sign,omitempty"`
	// Whether the contentCommitment (formerly called nonRepudiation) bit is set.
	ContentCommitment *bool `json:"content_commitment,omitempty"`
	// Whether the cRLSign bit is set.
	CrlSign *bool `json:"crl_sign,omitempty"`
	// Whether the dataEncipherment bit is set.
	DataEncipherment *bool `json:"data_encipherment,omitempty"`
	// Whether the decipherOnly bit is set.
	DecipherOnly *bool `json:"decipher_only,omitempty"`
	// Whether the digitalSignature bit is set.
	DigitalSignature *bool `json:"digital_signature,omitempty"`
	// Whether the encipherOnly bit is set.
	EncipherOnly *bool `json:"encipher_only,omitempty"`
	// Whether the keyAgreement bit is set.
	KeyAgreement *bool `json:"key_agreement,omitempty"`
	// Whether the keyEncipherment bit is set.
	KeyEncipherment *bool `json:"key_encipherment,omitempty"`
	// The integer value of the bitmask in the extension.
	Value *int `json:"value,omitempty"`
}

func (o *KeyUsage) GetCertificateSign() *bool {
	if o == nil {
		return nil
	}
	return o.CertificateSign
}

func (o *KeyUsage) GetContentCommitment() *bool {
	if o == nil {
		return nil
	}
	return o.ContentCommitment
}

func (o *KeyUsage) GetCrlSign() *bool {
	if o == nil {
		return nil
	}
	return o.CrlSign
}

func (o *KeyUsage) GetDataEncipherment() *bool {
	if o == nil {
		return nil
	}
	return o.DataEncipherment
}

func (o *KeyUsage) GetDecipherOnly() *bool {
	if o == nil {
		return nil
	}
	return o.DecipherOnly
}

func (o *KeyUsage) GetDigitalSignature() *bool {
	if o == nil {
		return nil
	}
	return o.DigitalSignature
}

func (o *KeyUsage) GetEncipherOnly() *bool {
	if o == nil {
		return nil
	}
	return o.EncipherOnly
}

func (o *KeyUsage) GetKeyAgreement() *bool {
	if o == nil {
		return nil
	}
	return o.KeyAgreement
}

func (o *KeyUsage) GetKeyEncipherment() *bool {
	if o == nil {
		return nil
	}
	return o.KeyEncipherment
}

func (o *KeyUsage) GetValue() *int {
	if o == nil {
		return nil
	}
	return o.Value
}
