// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type IpmiCapabilitiesAuthStatus struct {
	// If true, the server allows anonymous login.
	AnonymousLoginEnabled *bool `json:"anonymous_login_enabled,omitempty"`
	// If true, each message must be authenticated.
	AuthEachMessage *bool `json:"auth_each_message,omitempty"`
	// If true, the server has anonymous users.
	HasAnonymousUsers *bool `json:"has_anonymous_users,omitempty"`
	// If true, the server supports named users.
	HasNamedUsers *bool `json:"has_named_users,omitempty"`
	// The KG field.
	TwoKeyLoginRequired *bool `json:"two_key_login_required,omitempty"`
	// If true, user authentication is disabled.
	UserAuthDisabled *bool `json:"user_auth_disabled,omitempty"`
}

func (o *IpmiCapabilitiesAuthStatus) GetAnonymousLoginEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AnonymousLoginEnabled
}

func (o *IpmiCapabilitiesAuthStatus) GetAuthEachMessage() *bool {
	if o == nil {
		return nil
	}
	return o.AuthEachMessage
}

func (o *IpmiCapabilitiesAuthStatus) GetHasAnonymousUsers() *bool {
	if o == nil {
		return nil
	}
	return o.HasAnonymousUsers
}

func (o *IpmiCapabilitiesAuthStatus) GetHasNamedUsers() *bool {
	if o == nil {
		return nil
	}
	return o.HasNamedUsers
}

func (o *IpmiCapabilitiesAuthStatus) GetTwoKeyLoginRequired() *bool {
	if o == nil {
		return nil
	}
	return o.TwoKeyLoginRequired
}

func (o *IpmiCapabilitiesAuthStatus) GetUserAuthDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.UserAuthDisabled
}
